<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Narinari's Blog]]></title>
  <link href="http://narinari.github.io/atom.xml" rel="self"/>
  <link href="http://narinari.github.io/"/>
  <updated>2014-05-03T15:28:23+09:00</updated>
  <id>http://narinari.github.io/</id>
  <author>
    <name><![CDATA[narinari]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Consul with Docker]]></title>
    <link href="http://narinari.github.io/blog/2014/04/25/consul-with-docker/"/>
    <updated>2014-04-25T14:00:47+09:00</updated>
    <id>http://narinari.github.io/blog/2014/04/25/consul-with-docker</id>
    <content type="html"><![CDATA[<p>ConsulをDockerで動かした遊んでみました。</p>

<p>Consulについてはいち早く翻訳&amp;解説している素晴らしい人がいるので、そちらを参照してください。</p>

<ul>
<li><a href="http://pocketstudio.jp/log3/2014/04/18/what_is_consul/">Consulを使ってみた | Pocketstudio.jp log3</a></li>
<li><a href="http://pocketstudio.jp/log3/2014/04/19/translation_consul_related_documents/">Consul関連文書の参考訳、Serfとの違い等 | Pocketstudio.jp log3</a></li>
<li><a href="http://pocketstudio.jp/log3/2014/04/23/consul_docs_part2/">Consul関連ドキュメント(参考訳)Part2 | Pocketstudio.jp log3</a></li>
</ul>


<p>まずは、Dockerfileを作ります。</p>

<div><script src='https://gist.github.com/11283798.js'></script>
<noscript><pre><code>FROM ubuntu

RUN apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y \
    build-essential \
    wget \
    curl \
    git

RUN curl -L -o counsul.zip &quot;https://dl.bintray.com/mitchellh/consul/0.2.0_linux_amd64.zip&quot; &amp;&amp; unzip consul.zip &amp;&amp; mv consul /usr/local/bin

EXPOSE 8400 8500 8600 8301 8302
ENTRYPOINT [&quot;consul&quot;]</code></pre></noscript></div>


<p>動作させるようにするには以下のようにします。</p>

<p>まず、上記のDockerfileのあるディレクトリに移動して<code>consul</code>という名前でDockerイメージを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>docker-consul
</span><span class='line'><span class="nv">$ </span>sudo docker build -t consul .
</span></code></pre></td></tr></table></div></figure>


<p>エージェントをサーバモードで起動します。最後のオプション<code>-client</code>を指定しないと、ホストからconsulに問い合わせができなくなります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker run -t -i --rm consul agent -server -bootstrap -data-dir ./data/consul1 -client<span class="o">=</span>0.0.0.0
</span></code></pre></td></tr></table></div></figure>


<p>必要なだけターミナルを開いて、エージェントをクライアントモードで起動します。<code>-node</code>で名前をつけておくとログを追いやすいです。<code>172.17.0.2</code>はサーバモードで起動しているDockerのIPです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker run -t -i --rm consul agent -node<span class="o">=</span>consul2 -data-dir /tmp -join<span class="o">=</span>172.17.0.2
</span></code></pre></td></tr></table></div></figure>


<p>consulサーバに問い合わせて状況を確認できます。URLはサーバを起動したコンテナのIPを指定します。デフォルトでは起動する度に172.17.0.2から順番に割り当てられます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl 172.17.0.2:8500/v1/catalog/nodes
</span><span class='line'><span class="o">[{</span><span class="s2">&quot;Node&quot;</span>:<span class="s2">&quot;56e2c7b30308&quot;</span>,<span class="s2">&quot;Address&quot;</span>:<span class="s2">&quot;172.17.0.2&quot;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&quot;Node&quot;</span>:<span class="s2">&quot;consul2&quot;</span>,<span class="s2">&quot;Address&quot;</span>:<span class="s2">&quot;172.17.0.4&quot;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&quot;Node&quot;</span>:<span class="s2">&quot;consul3&quot;</span>,<span class="s2">&quot;Address&quot;</span>:<span class="s2">&quot;172.17.0.5&quot;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&quot;Node&quot;</span>:<span class="s2">&quot;consul4&quot;</span>,<span class="s2">&quot;Address&quot;</span>:<span class="s2">&quot;172.17.0.3&quot;</span><span class="o">}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>DNSも反応します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>dig @172.17.0.2 -p 8600 consul2.node.consul. ANY
</span><span class='line'>
</span><span class='line'><span class="c"># (snip)</span>
</span><span class='line'>
</span><span class='line'>;; QUESTION SECTION:
</span><span class='line'>;consul2.node.consul.           IN      ANY
</span><span class='line'>
</span><span class='line'>;; ANSWER SECTION:
</span><span class='line'>consul2.node.consul.    0       IN      A       172.17.0.4
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://narinari.github.io/assets/consul_docker_console.png" alt="Consulを動かしている様子" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y Combinator]]></title>
    <link href="http://narinari.github.io/blog/2014/04/12/y-combinator/"/>
    <updated>2014-04-12T11:33:07+09:00</updated>
    <id>http://narinari.github.io/blog/2014/04/12/y-combinator</id>
    <content type="html"><![CDATA[<p>友人がYコンビネータの定義が理解できないと呟いていた。
それをみて、自分もその定義を見て理解できなかったことを思い出しました。</p>

<p>すっかり忘れてしまっていたので、Yコンビネータについて復習をしてみました。
友人が理解できるように説明したので、転載しておきます。</p>

<h2>昔話</h2>

<p>私がYコンビネータを知ったのは、ポール・グレアムが<a href="http://ycombinator.com/">Yコンビネータ社</a>を創立したときだと思います。</p>

<p>Yコンビネータに反応した根っこは、<a href="https://github.com/esumii/min-caml">min-caml</a>を何かで知って、オブジェクト指向に傾倒していた私に関数型言語という新たな世界を知ったことに始まります。
当時の自分は、プログラミング言語の要素はどのようなパラダイムであっても、変数定義や制御構文がベースとしてあって、その上にクラスの定義やメソッドの定義があるように捉えてました（関数や手続きの定義は、メソッド定義のバリエーションのように思っていた）。
新しい言語でプログラミングするにしても、ベースとなる部分は変わらないし、その上に乗っかる部分はキーワードや構文が異なるだけで本質的に同じように理解しても不自由しませんでした。
そんな中で、min-camlにはじめとして、OCaml、Haskellなどの関数型言語を知りました。</p>

<p>関数関数と言ってもC言語の関数との違いがわからず、関数を第一級市民とすることに、どれだけのありがたみがわからない中で、関数を重要視する言語があるというのだから、何かあるんだろうとモヤモヤしている
時に、Yコンビネータ社の語源をたどって知ったのでした。</p>

<p>友人が悶々としていたYコンビネータの定義は以下の様なものでした。多分、自分が見た時も同じ式だったと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y = λ f. (λ x. f(x x))(λ x. f(x x)) -- ①</span></code></pre></td></tr></table></div></figure>


<p>当時は色々なブログでYコンビネータについて解説していたのですが、単体では理解できず、記事を渡り歩いて理解しました。</p>

<h2>代入して考えてみる</h2>

<p>まず、Yコンビネータの定義に具体的な値を適用してみました。
Yコンビネータの定義①は、同じ変数名を使っているのでわかりにくいと感じたので、以下のように変形しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y = λ f. (λ y. f(y y))(λ x. f(x x)) -- ①の最初の変数名を変えた x→y</span></code></pre></td></tr></table></div></figure>


<p>Yコンビネータに関数aを適用してみる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y a = (λf. (λ z. f(z z))(λ x. f(x x))) a -- ②
</span><span class='line'>    = (λ z. a(z z))(λ x. a(x x)) -- ③β簡約:fをaに置き換えた
</span><span class='line'>    = a((λ x. a(x x)) (λx. a(x x))) -- β簡約:zをλx. a(x x)に置き換えた
</span><span class='line'>         ^^^^^^^^^^^^^^^^^^^^^^^^</span></code></pre></td></tr></table></div></figure>


<p>下線部は、②の最初の関数の束縛変数zをxにしただけで同じ関数になります。
③は、Yコンビネータに関数aを適用(β簡約)した結果だから、<code>Y a</code>に置き換えられるので、以下のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y a = a(Y a) -- 下線部を置き換えた</span></code></pre></td></tr></table></div></figure>


<p>結局、Yコンビネータに関数を適用したら、渡された関数を再起呼び出しする関数が得られるのでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y a = a(Y a)
</span><span class='line'>= a(a(Y a)) -- Y aを展開
</span><span class='line'>= a(a(a(Y a))) -- もっと展開
</span><span class='line'>= a(a(a(a(Y a)))) -- もっともっと展(ry
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>ラムダ式との関係</h2>

<p>最後の下線を書き換えるところが、最初の関門だと思います。それ以前に当時の自分は、λ x. a(x x)の定義を見て、「引数のxにx自身を適用する意味がわからない」と混乱していましたが。</p>

<p>結局のところ、それが何なの？という結果になりましたが、ラムダ式の世界で生まれたことを忘れると、この流れの思考は迷子になります。</p>

<p>ラムダ式は名前をつけることは必須じゃないので、自分自身を呼び出す無名関数は定義できないように思います。でも、ラムダ式には束縛変数（引数）があるので、無名関数を引数に渡して変数に束縛し、束縛変数のもとで再起するような関数を作り出せばいいことに気がつけば、Yコンビネータはまさに任意の関数を再起呼び出しする関数を作り出していることがわかります。</p>

<p>再起ができればループも実現できるし、実は条件分岐もラムダ式で記述できるから、ラムダ式だけでプログラムが記述できる、ラムダ抽象SUGEEEEEEE!!!ってなるわけですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress first post]]></title>
    <link href="http://narinari.github.io/blog/2014/03/07/octopress-first-post/"/>
    <updated>2014-03-07T01:12:47+09:00</updated>
    <id>http://narinari.github.io/blog/2014/03/07/octopress-first-post</id>
    <content type="html"><![CDATA[<p>Blogはじめます</p>
]]></content>
  </entry>
  
</feed>
